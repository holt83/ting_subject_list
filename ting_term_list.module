<?php

/**
 * @file
 *
 * Module file for the Ting subject list module.
 */

// Default cache lifetime for term list (7 days).
define('TING_TERM_LIST_DEFAULT_CACHE_LIFETIME', 7); 
// Default amount of term lists to cache each night.
define('TING_TERM_LIST_DEFAULT_CACHE_AMOUNT', 10); 

/* Include file needed by features */
include_once 'ting_term_list.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function ting_term_list_ctools_plugin_directory($owner, $plugin_type) {
	if ($owner == 'ctools' && !empty($plugin_type)) {
		return "plugins/$plugin_type";
	}
}

/**
 * Implements hook_menu().
 */
function ting_term_list_menu() {
	$items = array();
	$items['admin/config/ting/term-list'] = array(
		'title' => 'Term list settings',
		'description' => t('Manage settings for the ting term list module.'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('ting_term_list_admin_form'),
		'access arguments' => array('administer ting settings'),
	);
	return $items;
}

/**
 * Form builder for 'admin/config/ting/term-list' route.
 */
function ting_term_list_admin_form($form, &$form_state) {
	// Cache settings
	$form['cache_settings'] = array(
		'#type' => 'fieldset',
		'#title' => t('Cache settings'),
		'#tree' => FALSE,
	);
	$options = array();
	for ($i = 7; $i <= 14; $i++) {
		$options[$i] = t('@days dage', array('@days' => $i));
	}
	$form['cache_settings']['ting_term_list_cache_lifetime'] = array(
		'#type' => 'select',
		'#title' => t('Cache lifetime'),
		'#description' => t('Select the amount of time term lists should be cached'),
		'#default_value' => variable_get('ting_term_list_cache_lifetime', 
			TING_TERM_LIST_DEFAULT_CACHE_LIFETIME),
		'#options' => $options,
	);
	$options = array();
	for ($i = 1; $i <= 12; $i++) {
		$amount = $i * 5;
		$options[$amount] = $amount;
	}
	$form['cache_settings']['ting_term_list_cache_amount'] = array(
		'#type' => 'select',
		'#title' => t('Cache amount'),
		'#description' => t('Select the max amount of term lists to cache on nightly cron jobs'),
		'#default_value' => variable_get('ting_term_list_cache_amount',
			TING_TERM_LIST_DEFAULT_CACHE_AMOUNT),
		'#options' => $options,
	);

	// Cache history table
	$header = array(
		array('data' => t('ID'), 'field' => 'n.nid'),
		array('data' => t('Title'), 'field' => 'n.title'),
		array('data' => t('Time'), 'field' => 'chttl.time'),
	);
	$query = db_select('node', 'n')->extend('TableSort');
	$query->join('cache_history_ting_term_list', 'chttl', 'n.nid = chttl.nid');
	$query->addField('n', 'nid', 'nid');
	$query->addField('n', 'title', 'title');
	$query->addField('chttl', 'time', 'time');
	$result = $query->orderByHeader($header)->execute();
	$rows = array();
	foreach ($result as $row) {
		$rows[] = array('data' => (array) $row);
	}
	$table = array(
		'#theme' => 'table',
		'#header' => $header,
		'#rows' => $rows,	
	);
	$form['cache_history'] = array(
		'#type' => 'fieldset',
		'#title' => t('Cache history'),
		'#tree' => FALSE,
	);
	$form['cache_history']['cache_history_table'] = $table;
	return system_settings_form($form);
}

/**
 * Testing
 */
function ting_term_list_init() {
	/*$month = date('n');
	$day = date('j');
	$year = date('Y');
	$midnight_time = mktime(0, 0, 0, $month, $day + 1, $year);		
	$query = db_select('cache_history_ting_term_list', 'chttl')
		->fields('chttl', array('nid', 'time'))
		->condition('time', $midnight_time, '>=');
	$cache_history_count = $query->countQuery()->execute()->fetchField();
	file_put_contents("/home/drupalpro/debug/debug.txt", print_r($cache_history_count , TRUE), FILE_APPEND);*/
}

/**
 * Implements hook_cron().
 */
function ting_term_list_cron() {
	// We only want to update the cache once a night between 00:00 and 06:00.
	$hour = 2;//date('G');
	if ($hour >= 0 && $hour <= 6) {
		// Check to see if tonights updates already have been run.
		$month = date('n');
		$day = date('j');
		$year = date('Y');
		$midnight_time = mktime(0, 0, 0, $month, $day, $year);		
		$query = db_select('cache_history_ting_term_list', 'chttl')
			->fields('chttl', array('nid', 'time'))
			->condition('time', $midnight_time, '>=');
		$cache_history_count = $query->countQuery()->execute()->fetchField();
		$queue = DrupalQueue::get('ting_term_list_cache_queue');
		// If there was no cache updates for tonight in the history and the queue
		// is empty, we go ahead and start tonights updates. 
		if ($cache_history_count == 0 && $queue->numberOfItems() == 0) {
			$cache_amount = _ting_term_list_get_cache_amount();
			$query = db_select('cache_ting_term_list', 'cttl')
			  ->fields('cttl', array('cid', 'created'))
			  ->orderBy('created', 'ASC')
			  ->range(0, $cache_amount);
			$result = $query->execute();
			foreach ($result as $record) {
				$nid = _ting_term_list_get_nid_from_cid($record->cid);
				$node = node_load($nid);
				$queue->createItem($node);
			}
		}
		// Clean up old rows from the history table.
		$history_treshold = time() - (30 * 24 * 3600);
		$query = db_delete('cache_history_ting_term_list')
			->condition('time', $history_treshold, '<');
		$delete_count = $query->execute();
	}
}

/**
 * Implements hook_cron_queue_info().
 */
function ting_term_list_cron_queue_info() {
	$queues['ting_term_list_cache_queue'] = array(
		'worker callback' => 'ting_term_list_cron_worker_callback',
		'time' => 60,
	);
	return $queues;
}

/**
 * Worker callback.
 *
 * Cache the term list for the specified node and update cache history.
 */
function ting_term_list_cron_worker_callback($node) {
	ting_term_list_set_cache($node);
	$query = db_insert('cache_history_ting_term_list');
	$query->fields(array(
		'nid' => $node->nid,
		'time' => time(),
	));
	return $query->execute();
}

/**
 * Implements hook_theme().
 */
function ting_term_list_theme() {
	return array(
		'ting_term_list' => array(
			'variables' => array(
				'terms' => array(),
				'column_count' => 3,
			),
			'template' => 'ting-term-list',
		),
		'ting_term_list_column' => array(
			'variables' => array(
				'terms' => array(),
			),
			'template' => 'ting-term-list-column',
		),
		'ting_term_list_term' => array(
			'variables' => array(
				'term' => NULL,
			),
			'template' => 'ting-term-list-term',
		),
	);
}

/**
 * Preprocess function for a term list.
 *
 * Sets up render array for each column and adds CSS. 
 */
function template_preprocess_ting_term_list(&$variables) {
	$terms = $variables['terms'];
	$column_count = $variables['column_count'];
	$columns = _ting_term_list_populate_columns($terms, $column_count);
	$variables['columns'] = $columns;
	_ting_term_list_add_css($column_count);
}

/**
 * Preprocess function for a column in the term list.
 *
 * Sets up render array for each term in the column.
 */
function template_preprocess_ting_term_list_column(&$variables) {
	$terms = $variables['terms'];
	$terms_render = array();
	foreach ($terms as $term_name => $material_count) {
		$terms_render[] = array(
			'#theme' => 'ting_term_list_term',
			'#term' => array(
			  'term_name' => $term_name,
			  'material_count' => $material_count,
			),
		);
	}
	$variables['terms'] = $terms_render;
}

/**
 * Preprocess function for a single term in the term list.
 */
function template_preprocess_ting_term_list_term(&$variables) {
	$term = $variables['term'];
	$variables['term_name'] = $term['term_name'];
	$variables['term_href'] = '/search/ting/' . $term['term_name'];
	$variables['material_count'] = $term['material_count']; 
}

/**
 * Populate the $terms in the specified number of columns.
 */
function _ting_term_list_populate_columns($terms, $column_count) {
	// The total term count for the list.
	$term_count = count($terms);
	// The term count for a column in the list.
	$column_term_count = (int)($term_count / $column_count);
	// If the number of terms doesn't fit equally in the columns we hava a rest.
	// This rest will be filled out in the left-most columns.
	$term_rest = $term_count % $column_count;
	$columns = array();
	$offset = 0;
	for ($i = 0; $i < $column_count; $i++) {
		$length = $column_term_count;
		// If we have a rest, put an extra term in this column.
		if ($term_rest > 0) {
			$length++; 	
			$term_rest--;
		}
		$column_terms = array_slice($terms, $offset, $length); 	
		$offset += $length;
		$columns[$i] = array(
			'#theme' => 'ting_term_list_column',
			'#terms' => $column_terms,
		);
	}
	return $columns;
}

/**
 * Adds the CSS for the term list.
 */
function _ting_term_list_add_css($column_count) {
	$column_width = (100 / $column_count) . '%';
	$css_options = array('group' => CSS_DEFAULT, 'type' => 'inline');
	$css = "div#ting-term-list div.ting-term-list-column { width: $column_width; }";
	drupal_add_css($css, $css_options);
	$css_options['type'] = 'file';
	$module_path = drupal_get_path('module', 'ting_term_list');
	drupal_add_css($module_path . '/ting_term_list_style.css', $css_options);
}

/**
 * @param $node
 *   A node of type 'ting_term_list' with the settings for the term list.
 * @return
 *   An array of Ting material terms matching the query from the node.
 *   (term_name => material_count).
 */
function ting_term_list_get_terms($node) {
	// Check the cache first.
	$cache = cache_get('ting_term_list:' . $node->nid, 'cache_ting_term_list');
	if ($cache && ($cache->expire > REQUEST_TIME)) {
		$terms = $cache->data;
	}
	// Else fetch the terms from the data well and cache the list.	
	else {
		$terms = ting_term_list_set_cache($node);
	}
	return $terms;
}

/**
 * Updates the cache for the specified term list node.
 *
 * @return
 *   An array with the terms that was saved to the cache.
 */
function ting_term_list_set_cache($node) {
	// Get term list settings or apply default values if necessary.
	$term_query = ting_term_list_get_field_value($node, 'field_term_list_term_query');
	$term_count = ting_term_list_get_field_value($node, 'field_term_list_term_count');
	// Search the well for terms
	$terms = ting_term_list_search_terms($term_query, $term_count);
	$cid = _ting_term_list_get_cid_from_nid($node->nid);
	// Caculate the expiration time for the cache.
	$expiration_time = time() + _ting_term_list_get_cache_lifetime();
	cache_set($cid, $terms, 'cache_ting_term_list', $expiration_time);
	return $terms;			
}

/**
 * Fetch Ting material terms from the data well, using the facet search option 
 * on the OpenSearch webservice.  
 *
 * @param $term_query
 *   A cql query to run against the data well, specifying a category of terms
 *   (e.g. 'musik', 'bog')
 * @param $term_count
 *   The max number of terms to return.
 */
function ting_term_list_search_terms($term_query, $term_count) {
	require_once drupal_get_path('module', 'ting') . '/ting.client.inc';
	$request = ting_get_request_factory()->getSearchRequest();
	$request->setQuery($term_query);
	if ($agency = variable_get('ting_agency', FALSE)) {
		$request->setAgency($agency);
	}
	$profile = variable_get('ting_search_profile', '');
	if (!empty($profile) && method_exists($request, 'setProfile')) {
	  $request->setProfile($profile);
	}
	// Use facet.subject to get terms
	$request->setFacets(array('facet.subject'));
	// Set the number of subjects to return
	$request->setNumFacets($term_count);
	// Get the terms from search result object
	$search_result = ting_execute($request);
	$terms = array();
	if (isset($search_result->facets)) {
		$terms = $search_result->facets['facet.subject']->terms;
	}
	// Sort on term-name (key).
	ksort($terms);
	return $terms;	
}

/**
 * Gets the values from the specified field on the specified node.
 */
function ting_term_list_get_field_value($node, $field_name) {
	if (isset($node->{$field_name}) && !empty($node->{$field_name})) {
		$value = field_get_items('node', $node, $field_name);
		$value = array_shift(array_values($value));
		return $value['value'];
	}
	return FALSE;
}

/**
 * Helper function to get cid from nid.
 */
function _ting_term_list_get_cid_from_nid($nid) {
	return 'ting_term_list:' . $nid;
}

/**
 * Helper function to get nid from cid.
 */
function _ting_term_list_get_nid_from_cid($cid) {
	$cid_explode = explode(':', $cid);
	return (isset($cid_explode[1]) ? $cid_explode[1] : 0);
}

/**
 * Helper function to fetch cache lifetime from the database.
 */
function _ting_term_list_get_cache_lifetime() {
	$cache_lifetime = variable_get('ting_term_list_cache_lifetime', 
		TING_TERM_LIST_DEFAULT_CACHE_AMOUNT);
	return ($cache_lifetime * 24 * 60 * 60);
}

/**
 * Helper function to fetch cache amount from the database.
 */
function _ting_term_list_get_cache_amount() {
  return variable_get('ting_term_list_cache_amount', 
  	TING_TERM_LIST_DEFAULT_CACHE_AMOUNT);
}