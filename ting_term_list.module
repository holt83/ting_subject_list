<?php

/**
 * @file
 *
 * Module file for the Ting subject list module.
 */

/* Constants */
define('TING_TERM_LIST_PATH', drupal_get_path('module', 'ting_term_list'));

/* Include file needed by features */
include_once 'ting_term_list.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function ting_term_list_ctools_plugin_directory($owner, $plugin_type) {
	if ($owner == 'ctools' && !empty($plugin_type)) {
		return "plugins/$plugin_type";
	}
}

/**
 * Implements hook_theme().
 */
function ting_term_list_theme() {
	return array(
		'ting_term_list' => array(
			'variables' => array(
				'terms' => array(),
				'column_count' => 3,
			),
			'template' => 'ting-term-list',
		),
		'ting_term_list_column' => array(
			'variables' => array(
				'terms' => array(),
				'column_title' => NULL,
			),
			'template' => 'ting-term-list-column',
		),
		'ting_term_list_term' => array(
			'variables' => array(
				'term' => NULL,
			),
			'template' => 'ting-term-list-term',
		),
	);
}

/**
 * Preprocess function for a term list.
 *
 * Sets up render array for each column and adds CSS. 
 */
function template_preprocess_ting_term_list(&$variables) {
	$terms = $variables['terms'];
	// The total term count for the list.
	$term_count = count($terms);
	$column_count = $variables['column_count'];
	// The term count for a column in the list.
	$column_term_count = (int)($term_count / $column_count);
	$term_rest = $term_count % $column_count;
	$columns = array();
	$offset = 0;
	for ($i = 0; $i < $column_count; $i++) {
		$length = $column_term_count;
		// If we have a rest -> put an extra term in this column.
		if ($term_rest > 0) {
			$length++; 	
			$term_rest--;
		}
		$column_terms = array_slice($terms, $offset, $length); 	
		$offset += $length;
		$columns[$i] = array(
			'#theme' => 'ting_term_list_column',
			'#terms' => $column_terms,
		);
	}
	$variables['columns'] = $columns;
	// Add CSS.
	$column_width = 100 / $column_count;
	$css = 'div#ting-term-list div.ting-term-list-column { width: ' . $column_width . '%; }'; 		
	$css_options = array('group' => CSS_DEFAULT, 'type' => 'inline');
	drupal_add_css($css, $css_options);
	$css_options['type'] = 'file';
	drupal_add_css(TING_TERM_LIST_PATH . '/ting_term_list.css', $css_options);
}

/**
 * Preprocess function for a column in the term list.
 *
 * Sets up render array for each term in the column.
 */
function template_preprocess_ting_term_list_column(&$variables) {
	$terms = $variables['terms'];
	$terms_render = array();
	foreach ($terms as $term_name => $term_count) {
		$terms_render[] = array(
			'#theme' => 'ting_term_list_term',
			'#term' => array(
			  'term_name' => $term_name,
			  'term_count' => $term_count,
			),
		);
	}
	$variables['terms'] = $terms_render;
}

/**
 * Preprocess function for a single term in the term list.
 */
function template_preprocess_ting_term_list_term(&$variables) {
	$term = $variables['term'];
	$variables['term_name'] = $term['term_name'];
	$variables['term_count'] = '(' . $term['term_count'] . ')';
}

/**
 * Fetch Ting material terms from the data well, using the facet search option 
 * on the OpenSearch webservice. 
 * Returns an array keyed by term-names and their associated material count.
 * The array is sorted alphabetically on term-name.
 *
 * @param $query
 *   A cql query string specifying a category of terms (e.g. 'bog', 'musik').
 * @param $num_resullt
 *   The max number of terms to return.
 */
function ting_term_list_get_terms($query, $num_results) {
	require_once drupal_get_path('module', 'ting') . '/ting.client.inc';

	$request = ting_get_request_factory()->getSearchRequest();
	$request->setQuery($query);
	if ($agency = variable_get('ting_agency', FALSE)) {
		$request->setAgency($agency);
	}
	$profile = variable_get('ting_search_profile', '');
	if (!empty($profile) && method_exists($request, 'setProfile')) {
	  $request->setProfile($profile);
	}
	// Use facet.subject to get terms
	$request->setFacets(array('facet.subject'));
	// Set the number of subjects to return
	$request->setNumFacets($num_results);

	// Get the terms from search result object
	$search_result = ting_execute($request);
	$terms = array();
	if (isset($search_result->facets)) {
		$terms = $search_result->facets['facet.subject']->terms;
	}
	// Sort on term-name (key).
	ksort($terms);
	return $terms;
}

/**
 * Returns a well structured settings array from the field values in the node.
 */
function ting_term_list_get_term_list_settings($node) {
	$fields = array(
		'category' => 'field_term_list_term_cat',
		'term_count' => 'field_term_list_term_count',
		'column_count' => 'field_term_list_column_count',
	);
	$settings = array();
	foreach ($fields as $key => $field) {
		if (isset($node->{$field}) && !empty($node->{$field})) {
			$value = field_get_items('node', $node, $field);
			$value = array_shift(array_values($value));
			$value = $value['value'];
		}
		else {
			switch ($key) {
				case 'category':
					$value = 'bog'; 
					break;
				case 'term_count':
					$value = 60;
					break;
				case 'column_count':
					$value = 3;
			}
		}
		$settings[$key] = $value;
	}
	return $settings;
}